{"version":3,"sources":["components/Toolbar.js","components/Image.js","components/mark/BoldMark.js","components/mark/ItalicMark.js","components/mark/UnderlineMark.js","components/mark/CodeMark.js","components/TextEditor.js","App.js","serviceWorker.js","index.js"],"names":["Toolbar","props","react_default","a","createElement","className","children","Image","styled","_templateObject","selected","BoldMark","ItalicMark","property","DEFAULT_NODE","isTab","isKeyHotkey","isShiftTab","existingValue","JSON","parse","localStorage","getItem","initialValue","Value","fromJSON","document","nodes","object","type","leaves","text","MarkHotkey","options","key","onKeyDown","event","editor","next","ctrlKey","preventDefault","toggleMark","plugins","schema","last","normalize","_ref","code","node","child","paragraph","Block","create","insertNodeByKey","size","blocks","image","isVoid","insertImage","src","target","select","insertBlock","data","focus","insertDocument","name","TextEditor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ref","hasBlock","state","value","some","onChangeInputOfTopLevelBlockLimit","console","log","setState","topLevelBlockLimit","onChange","_ref2","stringify","isBlockListItemType","isParentBlockNumberedListType","block","getClosest","parent","isParentBlockBulletedListType","isLevelThree","forEach","wrapBlock","isLevelOne","setBlocks","unwrapBlock","onSaveClick","Storage","content","toJSON","length","alert","setItem","onCancelClick","onMarkClick","change","onBlockClick","assertThisInitialized","isActive","isList","isType","onImageClick","window","prompt","command","onFileSelect","file","files","reader","FileReader","includes","addEventListener","result","readAsDataURL","onDocumentFileClick","confirmAlert","title","message","buttons","label","onClick","link","download","href","toString","body","appendChild","click","removeChild","renderMark","mark","mark_BoldMark","mark_ItalicMark","UnderlineMark","CodeMark","renderNode","attributes","isFocused","imageSrc","get","components_Image","assign","documentSrc","react_icons_kit_default","icon","_this2","react","components_Toolbar","onPointerDown","bold","italic","underline","arrowUp","arrowDown","quote","listOl","listUl","slate_react_es","spellCheck","autoFocus","tabIndex","placeholder","Component","App","TextEditor_TextEditor","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eec6e137.chunk.js","sourcesContent":["import React from 'react';\n\nconst Toolbar = props => (\n    <div className=\"toolbar\">{props.children}</div>\n);\n\nexport default Toolbar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Image = styled('img')`\n  display: block;\n  max-width: 100%;\n  max-height: 20em;\n  box-shadow: ${props => (props.selected ? '0 0 0 2px blue;' : 'none')};\n`;\n\nexport default Image;\n","import React from 'react';\n\nconst BoldMark = props => (\n    <strong>\n        {props.children}\n    </strong>\n);\n\nexport default BoldMark;\n","import React from 'react'\n\nconst ItalicMark = props => (\n    <em property=\"italic\">\n        {props.children}\n    </em>\n);\n\nexport default ItalicMark;\n","import React from 'react'\n\nconst ItalicMark = props => (\n    <u property=\"underline\">\n        {props.children}\n    </u>\n);\n\nexport default ItalicMark;\n","import React from 'react'\n\nconst ItalicMark = props => (\n    <code property=\"code\">\n        {props.children}\n    </code>\n);\n\nexport default ItalicMark;\n","import React, {Component, Fragment} from 'react'\nimport {Block, Value} from 'slate'\nimport {isKeyHotkey} from 'is-hotkey'\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport 'react-bootstrap/dist/react-bootstrap';\n\nimport Toolbar from './Toolbar'\nimport Icon from 'react-icons-kit'\nimport {bold} from 'react-icons-kit/feather/bold'\nimport {italic} from 'react-icons-kit/feather/italic'\nimport {underline} from 'react-icons-kit/feather/underline'\nimport {code} from 'react-icons-kit/feather/code'\nimport {arrowUp} from 'react-icons-kit/metrize/arrowUp'\nimport {arrowDown} from 'react-icons-kit/metrize/arrowDown'\nimport {quote} from 'react-icons-kit/metrize/quote'\nimport {listOl} from 'react-icons-kit/fa/listOl'\nimport {listUl} from 'react-icons-kit/fa/listUl'\nimport {image} from 'react-icons-kit/fa/image'\nimport {file} from 'react-icons-kit/fa/file'\nimport {Editor} from 'slate-react'\nimport Image from './Image'\n\nimport {BoldMark, CodeMark, ItalicMark, UnderlineMark} from './index'\n\nconst DEFAULT_NODE = 'paragraph';\n\nconst isTab = isKeyHotkey('tab');\nconst isShiftTab = isKeyHotkey('shift+tab');\n\n// Update the initial content to be pulled from Local Storage if it exists.\nconst existingValue = JSON.parse(localStorage.getItem('content'));\n// Create our initial value...\nconst initialValue = Value.fromJSON(\n    existingValue || {\n        \"document\": {\n            \"nodes\": [\n                {\n                    \"object\": \"block\",\n                    \"type\": \"paragraph\",\n                    \"nodes\": [\n                        {\n                            \"object\": \"text\",\n                            \"leaves\": [\n                                {\n                                    \"text\":\n                                        \"\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n            ]\n        }\n    }\n);\n\nfunction MarkHotkey(options) {\n    // Grab our options from the ones passed in.\n    const {type, key} = options;\n\n    // Return our \"plugin\" object, containing the `onKeyDown` handler.\n    return {\n        onKeyDown(event, editor, next) {\n            // If it doesn't match our `key`, let other plugins handle it.\n            if (!event.ctrlKey || event.key !== key) return next();\n\n            // Prevent the default characters from being inserted.\n            event.preventDefault();\n\n            // Toggle the mark `type`.\n            editor.toggleMark(type)\n        },\n    }\n}\n\n// Initialize a plugin for each mark...\nconst plugins = [\n    MarkHotkey({key: 'b', type: 'bold'}),\n    MarkHotkey({key: 'i', type: 'italic'}),\n    MarkHotkey({key: 'u', type: 'underline'}),\n    MarkHotkey({key: '`', type: 'code'}),\n];\n\nconst schema = {\n    document: {\n        last: {type: 'paragraph'},\n        normalize: (editor, {code, node, child}) => {\n            switch (code) {\n                case 'last_child_type_invalid': {\n                    const paragraph = Block.create('paragraph');\n                    return editor.insertNodeByKey(node.key, node.nodes.size, paragraph)\n                }\n            }\n        },\n    },\n    blocks: {\n        image: {\n            isVoid: true\n        }\n    },\n};\n\nconst insertImage = (editor, src, target) => {\n    if (target) {\n        editor.select(target)\n    }\n\n    editor.insertBlock({\n        type: 'image',\n        data: {src},\n    });\n\n    editor.focus();\n};\n\nconst insertDocument = (editor, src, name, target) => {\n    if (target) {\n        editor.select(target)\n    }\n\n    editor.insertBlock({\n        type: 'document-file',\n        data: {src, name},\n    });\n};\n\nexport default class TextEditor extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: initialValue,\n            topLevelBlockLimit: 0,\n        };\n    }\n\n    ref = editor => {\n        this.editor = editor\n    };\n\n    hasBlock = type => {\n        const {value} = this.state;\n        return value.blocks.some(node => node.type === type)\n    };\n\n    // On change, update the app's React state with the new editor value.\n    onChangeInputOfTopLevelBlockLimit = event => {\n        console.log(event.target.name, event.target.value);\n        this.setState({\n            topLevelBlockLimit: event.target.value\n        });\n    };\n\n    onChange = ({value}) => {\n        console.log(JSON.stringify(value));\n        this.setState({value})\n    };\n\n    onKeyDown = (event, editor, next) => {\n\n        const {value} = editor;\n        const {document} = value;\n\n        const isBlockListItemType = this.hasBlock('list-item');\n\n        console.log('Is block list-item type? ' + isBlockListItemType);\n\n        const isParentBlockNumberedListType = value.blocks.some(block => {\n            return !!document.getClosest(block.key, parent => parent.type === 'numbered-list')\n        });\n\n        const isParentBlockBulletedListType = value.blocks.some(block => {\n            return !!document.getClosest(block.key, parent => parent.type === 'bulleted-list')\n        });\n\n        console.log(\"Is parent block numbered-list type? \" + isParentBlockNumberedListType);\n        console.log(\"Is parent block bulleted-list type? \" + isParentBlockBulletedListType);\n\n        if (isTab(event)) {\n\n            // console.log(value.document.nodes.toString());\n\n            let isLevelThree = false;\n\n            value.document.nodes.forEach(block => {\n                console.log('Blocks: ');\n                console.log(block['type']);\n                console.log(block['key']);\n\n                if (block.type === 'numbered-list' || block.type === 'bulleted-list') {\n                    block.nodes.forEach(block => {\n                        console.log('Level 1 Blocks: ');\n                        console.log(block['type']);\n                        console.log(block['key']);\n\n                        isLevelThree = false;\n\n                        if (block.type === 'numbered-list' || block.type === 'bulleted-list') {\n                            block.nodes.forEach(block => {\n                                console.log('Level 2 Blocks: ');\n                                console.log(block['type']);\n                                console.log(block['key']);\n\n                                isLevelThree = false;\n\n                                if (block.type === 'numbered-list' || block.type === 'bulleted-list') {\n                                    console.log('Level 3 Blocks: ');\n                                    console.log(block['type']);\n                                    console.log(block['key']);\n\n                                    isLevelThree = true;\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n\n            value.blocks.forEach(block => {\n                console.log('Current cursor on: ');\n                console.log(block['key']);\n            });\n\n            if (isBlockListItemType && isParentBlockNumberedListType && !isLevelThree) {\n                editor.wrapBlock('numbered-list');\n            } else if (isBlockListItemType && isParentBlockBulletedListType && !isLevelThree) {\n                editor.wrapBlock('bulleted-list');\n            }\n\n            event.preventDefault();\n        } else if (isShiftTab(event)) {\n            let isLevelOne = false;\n\n            value.document.nodes.forEach(block => {\n                console.log('Blocks: ');\n                console.log(block['type']);\n                console.log(block['key']);\n\n                if (block.type === 'numbered-list' || block.type === 'bulleted-list') {\n                    block.nodes.forEach(block => {\n                        console.log('Level 1 Blocks: ');\n                        console.log(block['type']);\n                        console.log(block['key']);\n\n                        isLevelOne = true;\n\n                        if (block.type === 'numbered-list' || block.type === 'bulleted-list') {\n                            block.nodes.forEach(block => {\n                                console.log('Level 2 Blocks: ');\n                                console.log(block['type']);\n                                console.log(block['key']);\n\n                                isLevelOne = false;\n\n                                if (block.type === 'numbered-list' || block.type === 'bulleted-list') {\n                                    console.log('Level 3 Blocks: ');\n                                    console.log(block['type']);\n                                    console.log(block['key']);\n\n                                    isLevelOne = false;\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n            if (isBlockListItemType && isParentBlockNumberedListType) {\n                if (isLevelOne) {\n                    editor.setBlocks(DEFAULT_NODE).unwrapBlock('list-item').unwrapBlock('numbered-list')\n                } else {\n                    editor.unwrapBlock('list-item').unwrapBlock('numbered-list')\n                }\n            } else if (isBlockListItemType && isParentBlockBulletedListType) {\n                if (isLevelOne) {\n                    editor.setBlocks(DEFAULT_NODE).unwrapBlock('list-item').unwrapBlock('bulleted-list')\n                } else {\n                    editor.unwrapBlock('list-item').unwrapBlock('bulleted-list')\n                }\n            }\n\n            event.preventDefault();\n        }\n\n        return next();\n    };\n\n    onSaveClick = (event) => {\n        event.preventDefault();\n\n        console.log('onSaveClick');\n\n        if (typeof (Storage) !== \"undefined\") {\n            // Save the value to Local Storage.\n            const content = JSON.stringify(this.state.value.toJSON());\n            console.log('Content ', content);\n\n            const contentObject = JSON.parse(content);\n\n            if (contentObject.document.nodes.length > this.state.topLevelBlockLimit && this.state.topLevelBlockLimit != 0){\n                alert('Can not save due crossed the limit of blocks \\nYou set the limit is ' + this.state.topLevelBlockLimit)\n                return;\n            }\n\n            localStorage.setItem('content', content)\n        } else {\n            console.log('Sorry, your browser does not support Web Storage...')\n        }\n    };\n\n    onCancelClick = (event) => {\n        event.preventDefault();\n\n        this.setState({value: initialValue})\n    };\n\n    onMarkClick = (event, type) => {\n        event.preventDefault();\n\n        const change = this.editor.toggleMark(type);\n\n        this.onChange(change);\n    };\n\n    onBlockClick = (event, type) => {\n        event.preventDefault();\n\n        const {editor} = this;\n        const {value} = editor;\n        const {document} = value;\n\n        // Handle everything but list buttons.\n        if (type !== 'bulleted-list' && type !== 'numbered-list') {\n            const isActive = this.hasBlock(type);\n            const isList = this.hasBlock('list-item');\n\n            if (isList) {\n                editor\n                    .setBlocks(isActive ? DEFAULT_NODE : type)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list')\n            } else {\n                editor.setBlocks(isActive ? DEFAULT_NODE : type)\n            }\n        } else {\n            // Handle the extra wrapping required for list buttons.\n            const isList = this.hasBlock('list-item');\n            const isType = value.blocks.some(block => {\n                return !!document.getClosest(block.key, parent => parent.type === type)\n            });\n\n            if (isList && isType) {\n                editor\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list')\n            } else if (isList) {\n                editor\n                    .unwrapBlock(\n                        type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list'\n                    )\n                    .wrapBlock(type)\n            } else {\n                editor.setBlocks('list-item').wrapBlock(type)\n            }\n        }\n    };\n\n    onImageClick = event => {\n        event.preventDefault();\n        const src = window.prompt('Enter the URL of the image:');\n        if (!src) return;\n        this.editor.command(insertImage, src)\n    };\n\n    onFileSelect = event => {\n        event.preventDefault();\n\n        const file = event.target.files[0];\n        console.log('File ', file);\n\n        const validImageTypes = ['image/gif', 'image/jpeg', 'image/jpg', 'image/png'];\n        const validDocumentTypes = ['text/plain', 'application/pdf'];\n\n        const reader = new FileReader();\n\n        if (validImageTypes.includes(file.type)) {\n            console.log('This is image type file.');\n\n            reader.addEventListener('load', () => {\n                this.editor.command(insertImage, reader.result)\n            });\n\n            reader.readAsDataURL(file)\n        } else if (validDocumentTypes.includes(file.type)) {\n            console.log('This is document type file.');\n\n            reader.addEventListener('load', () => {\n                this.editor.command(insertDocument, reader.result, file.name)\n            });\n\n            reader.readAsDataURL(file)\n        } else {\n            alert('Invalid file type.')\n        }\n    };\n\n    onDocumentFileClick = (event, name, src) => {\n        event.preventDefault();\n        confirmAlert({\n            title: 'Are you sure?',\n            message: 'Want to download ' + name,\n            buttons: [\n                {\n                    label: 'Yes',\n                    onClick: () => {\n                        console.log('Download started...');\n                        const link = document.createElement('a');\n                        link.download = name;\n                        link.href = src.toString();\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    }\n                },\n                {\n                    label: 'No',\n                }\n            ]\n        });\n    };\n\n    renderMark = (props, editor, next) => {\n        switch (props.mark.type) {\n            case 'bold':\n                return <BoldMark {...props} />;\n\n            case 'italic':\n                return <ItalicMark {...props} />;\n\n            case 'underline':\n                return <UnderlineMark {...props} />;\n\n            case 'code':\n                return <CodeMark {...props} />;\n\n            default: {\n                return next();\n            }\n        }\n    };\n\n    renderNode = (props, editor, next) => {\n        const {attributes, children, node, isFocused} = props;\n\n        switch (node.type) {\n            case 'block-quote':\n                return <blockquote {...attributes}>{children}</blockquote>;\n            case 'heading-one':\n                return <h1 {...attributes}>{children}</h1>;\n            case 'heading-two':\n                return <h2 {...attributes}>{children}</h2>;\n            case 'list-item':\n                return <li {...attributes}>{children}</li>;\n            case 'numbered-list':\n                return <ol {...attributes}>{children}</ol>;\n            case 'bulleted-list':\n                return <ul {...attributes}>{children}</ul>;\n            case 'image':\n                const imageSrc = node.data.get('src');\n                return <Image src={imageSrc} selected={isFocused} {...attributes} />;\n            case 'document-file':\n                const documentSrc = node.data.get('src');\n                const name = node.data.get('name');\n                return <span onClick={(event) => this.onDocumentFileClick(event, name, documentSrc)}><Icon\n                    icon={file}/>{name}</span>;\n            default:\n                return next();\n        }\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Toolbar>\n                    <span>Enter the limit of blocks </span>\n                    <input name={\"topLevelBlockLimit\"}\n                           type={\"number\"}\n                           value={ this.state.topLevelBlockLimit === 0 ? 0 : this.state.topLevelBlockLimit}\n                           onChange={this.onChangeInputOfTopLevelBlockLimit} />\n                </Toolbar>\n                <Toolbar>\n                    <button className=\"button\" onPointerDown={(event) => this.onSaveClick(event)}>\n                        Save\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onCancelClick(event)}>\n                        Cancel\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onMarkClick(event, 'bold')}>\n                        <Icon icon={bold}/>\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onMarkClick(event, 'italic')}>\n                        <Icon icon={italic}/>\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onMarkClick(event, 'underline')}>\n                        <Icon icon={underline}/>\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onMarkClick(event, 'code')}>\n                        <Icon icon={code}/>\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onBlockClick(event, 'heading-one')}>\n                        <Icon icon={arrowUp}/>\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onBlockClick(event, 'heading-two')}>\n                        <Icon icon={arrowDown}/>\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onBlockClick(event, 'block-quote')}>\n                        <Icon icon={quote}/>\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onBlockClick(event, 'numbered-list')}>\n                        <Icon icon={listOl}/>\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onBlockClick(event, 'bulleted-list')}>\n                        <Icon icon={listUl}/>\n                    </button>\n                    <button className=\"button\" onPointerDown={(event) => this.onImageClick(event)}>\n                        <Icon icon={image}/>\n                    </button>\n                    <input className=\"button\" type=\"file\" onChange={(event) => this.onFileSelect(event)}/>\n\n                </Toolbar>\n                <Editor\n                    spellCheck\n                    autoFocus\n                    tabIndex={-1}\n                    placeholder={'Enter text here...'}\n                    plugins={plugins}\n                    schema={schema}\n                    value={this.state.value}\n                    ref={this.ref}\n                    onChange={this.onChange}\n                    onKeyDown={this.onKeyDown}\n                    renderMark={this.renderMark}\n                    renderNode={this.renderNode}\n                />\n            </Fragment>\n        )\n    }\n\n    componentDidMount() {\n\n    }\n}\n","import React, { Component } from 'react';\nimport TextEditor from './components/TextEditor';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <TextEditor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}